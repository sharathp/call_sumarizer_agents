version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: call-center-assistant
    ports:
      - "8501:8501"
    environment:
      # API Keys - set these in .env file
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2:-false}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT:-call-center-assistant}
      
      # Application settings
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_RETRIES=${MAX_RETRIES:-3}
      - RETRY_DELAY=${RETRY_DELAY:-1}
      
      # Model configuration
      - DEFAULT_LLM_PROVIDER=${DEFAULT_LLM_PROVIDER:-openai}
      - DEFAULT_LLM_MODEL=${DEFAULT_LLM_MODEL:-gpt-4}
      - DEFAULT_TEMPERATURE=${DEFAULT_TEMPERATURE:-0.7}
      
      # Streamlit configuration
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    volumes:
      # Mount data directory for sample transcripts and uploads
      - ./data:/app/data
      # Mount logs directory
      - ./logs:/app/logs
      # Mount .env file if it exists
      - ./.env:/app/.env:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - call-center-network

  # Optional Redis service for memory/caching
  redis:
    image: redis:7-alpine
    container_name: call-center-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - call-center-network
    profiles:
      - with-redis

  # Optional PostgreSQL service for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: call-center-postgres
    environment:
      - POSTGRES_DB=call_center
      - POSTGRES_USER=call_center_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U call_center_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - call-center-network
    profiles:
      - with-postgres

networks:
  call-center-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data: